name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: WSUSCmdrUpdateCheckV2.sln                         # Update with your solution name.
      InnoSetup_Script: create_install.iss                             # Path to your Inno Setup script.
      OutputDir: output                                                # Directory where the installer will be placed.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to the PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}

    # Build the application using the matrix configuration (Debug or Release)
    - name: Build the solution
      run: .\build.cmd $env:Solution_Name /p:Configuration=${{ matrix.configuration }}

    # Install Inno Setup via Chocolatey
    - name: Install Inno Setup
      run: choco install innosetup --no-progress

    # Build the Inno Setup installer
    - name: Build Installer with Inno Setup
      run: |
        "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" $env:InnoSetup_Script
      env:
        Configuration: ${{ matrix.configuration }}

    # Upload the installer as an artifact
    - name: Upload Installer
      uses: actions/upload-artifact@v3
      with:
        name: WSUSCmdrUpdateCheckV2-Installer-${{ matrix.configuration }}
        path: ${{ env.OutputDir }}\WSUSCmdrUpdateCheckV2Installer.exe

